<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.member.repository.FriendRepository">

    <!-- 친구 요청 보내기 -->
    <insert id="sendFriendRequest" parameterType="com.lec.spring.member.domain.Friend" flushCache="true">
        INSERT INTO friend(sender_id, receiver_id, intimacy, is_accept)
        VALUES (#{senderId}, #{receiverId}, #{intimacy}, #{isAccept})
    </insert>

    <!-- 친구 요청 수락 -->
    <update id="acceptFriendRequest" parameterType="com.lec.spring.member.domain.Friend">
        UPDATE friend
        SET is_accept = true
        WHERE sender_id = #{senderId}
          AND receiver_id = #{receiverId}
    </update>

    <!-- 친구 요청 거절 -->
    <delete id="rejectFriendRequest" parameterType="com.lec.spring.member.domain.Friend" flushCache="true">
        DELETE
        FROM friend
        WHERE receiver_id = #{receiverId}
          and sender_id = #{senderId}
    </delete>

    <!-- 친구 삭제 -->
    <delete id="deleteFriend">
        DELETE FROM friend
        WHERE (sender_id = #{friendId} AND receiver_id = #{memberId})
           OR (sender_id = #{memberId} AND receiver_id = #{friendId})
    </delete>

    <!-- 친구 신청 보낼 때 이미 보낸/받은 신청은 아닌지 확인 -->
    <select id="isAlreadyFriend" parameterType="com.lec.spring.member.domain.Friend" resultType="boolean">
        SELECT count(*)
        FROM friend f
        WHERE (sender_id = #{senderId} and receiver_id = #{receiverId})
           or (sender_id = #{receiverId} and receiver_id = #{senderId})
    </select>

    <!-- 수락된 친구 목록 조회 -->
    <select id="findFriendsWithDetailsDTO" resultType="com.lec.spring.member.domain.FriendDetailsDTO"
            parameterType="long">
        SELECT m.id                                                 AS friendId,
               pi.filename                                          AS profileImg,
               m.nickname                                           AS nickname,
               m.username                                           AS username,
               COUNT(CASE WHEN mm.visibility = 'PUBLIC' THEN 1 END) AS publicCount,
               COUNT(CASE WHEN mm.visibility = 'HIDDEN' THEN 1 END) AS hiddenCount,
               f.intimacy                                           AS intimacy
        FROM friend f
                 JOIN member m ON (f.sender_id = m.id OR f.receiver_id = m.id)
                 LEFT JOIN profile_img pi ON m.id = pi.member_id
                 LEFT JOIN my_matzip mm ON m.id = mm.member_id
        WHERE (f.sender_id = #{memberId} OR f.receiver_id = #{memberId})
          AND f.is_accept = TRUE
          AND m.id != #{memberId} -- 본인 ID 제외
        GROUP BY
            m.id, pi.filename, m.nickname, m.username, f.intimacy;
    </select>


    <resultMap id="FriendWithDetailsMap" type="com.lec.spring.member.domain.Friend">
        <id property="senderId" column="sender_id"/>
        <result property="receiverId" column="receiver_id"/>
        <result property="intimacy" column="intimacy"/>
        <result property="isAccept" column="is_accept"/>
        <result property="regdate" column="regdate"/>
        <association property="friendDetails" javaType="com.lec.spring.member.domain.FriendDetailsDTO">
            <id property="friendId" column="friendId"/>
            <result property="nickname" column="nickname"/>
            <result property="username" column="username"/>
            <result property="profileImg" column="profileImg"/>
            <result property="publicCount" column="public_count"/>
            <result property="hiddenCount" column="hidden_count"/>
        </association>
    </resultMap>

    <select id="findPendingRequests" resultType="com.lec.spring.member.domain.Friend">
        SELECT
            f.sender_id as senderId,
            f.receiver_id as receiverId,
            f.intimacy,
            f.is_accept as isAccept,
            f.regdate,
            m.nickname,
            m.username,
            m.id as friendId,
            p.filename as profileImg,
            COUNT(CASE WHEN mm.visibility = 'PUBLIC' THEN 1 END) as publicCount,
            COUNT(CASE WHEN mm.visibility = 'HIDDEN' THEN 1 END) as hiddenCount
        FROM friend f
                 JOIN member m ON f.sender_id = m.id
                 LEFT JOIN profile_img p ON m.id = p.member_id
                 LEFT JOIN my_matzip mm ON m.id = mm.member_id
        WHERE f.receiver_id = #{memberId}
          AND f.is_accept = false
        GROUP BY f.sender_id, f.receiver_id, f.intimacy, f.is_accept, f.regdate,
                 m.nickname, m.username, m.id, p.filename
    </select>

    <!-- 친구 검색 -->
    <select id="searchPotentialFriends" resultType="com.lec.spring.member.domain.FriendSearchResponseDTO">
        SELECT DISTINCT
            m.id AS id,
            m.username AS username,
            m.nickname AS nickname,
            pi.filename AS profileImg,
            COUNT(CASE WHEN mm.visibility = 'PUBLIC' THEN 1 END) AS publicCount,
            COUNT(CASE WHEN mm.visibility = 'HIDDEN' THEN 1 END) AS hiddenCount,
            CASE
                WHEN EXISTS (
                    SELECT 1
                    FROM friend f
                    WHERE (f.sender_id = #{currentMemberId} AND f.receiver_id = m.id)
                       OR (f.receiver_id = #{currentMemberId} AND f.sender_id = m.id)
                ) THEN true
                ELSE false
                END AS isAlreadyFriend
        FROM member m
                 LEFT JOIN profile_img pi ON m.id = pi.member_id
                 LEFT JOIN my_matzip mm ON m.id = mm.member_id
        WHERE
            m.id != #{currentMemberId}
          AND (
            LOWER(m.nickname) LIKE CONCAT('%', LOWER(#{searchTerm}), '%')
           OR LOWER(m.username) LIKE CONCAT('%', LOWER(#{searchTerm}), '%')
            )
          AND #{searchTerm} != ''
        GROUP BY
            m.id, m.username, m.nickname, pi.filename;
    </select>


    <!-- 친밀도 업데이트 -->
    <update id="updateIntimacy" flushCache="true">
        UPDATE friend f
        SET f.intimacy = f.intimacy + #{intimacy}
        WHERE f.is_accept = TRUE
          AND (
            (f.sender_id = #{id} AND f.receiver_id = #{targetId})
                OR (f.receiver_id = #{id} AND f.sender_id = #{targetId})
            )
    </update>

    <select id="findFriendRelationByMemberIds" resultType="com.lec.spring.member.domain.Friend">
        SELECT
            sender_id as senderId,
            receiver_id as receiverId,
            intimacy,
            is_accept as isAccept,
            regdate
        FROM friend
        WHERE ((sender_id = #{currentMemberId} AND receiver_id = #{targetId})
            OR
               (sender_id = #{targetId} AND receiver_id = #{currentMemberId}))
          AND is_accept = true
    </select>

</mapper>
